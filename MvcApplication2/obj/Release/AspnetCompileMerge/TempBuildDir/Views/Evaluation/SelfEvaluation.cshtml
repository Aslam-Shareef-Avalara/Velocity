@model MvcApplication2.ViewModel.EvaluationViewModel
@{
    ViewBag.Title = "Self-Evaluation";
    Layout = "~/Views/Shared/_2Col_Layout.cshtml";




}
<script src="~/Scripts/ckeditor/ckeditor.js"></script>
@functions{

    public string translateRating(int rating)
    {
        string translatedRating = "";
        switch (rating)
        {
            case 1: translatedRating = "Not a fit";
                break;
            case 2: translatedRating = "Underachieving";
                break;
            case 3: translatedRating = "Orange";
                break;
            case 4: translatedRating = "G'in the JD";
                break;
            case 5: translatedRating = "Crushed It!";
                break;
            default: translatedRating = "Unrated";
                break;
        }
        return translatedRating;
    }
    int stepNumber = 2;
    int counter = 0;
    public DataService.EmployeeEvaluation GetValidEmployeeEvalObj(Guid gid)
    {
        var g = Model.SelfEvaluations.Where(x => x.GoalId == gid).FirstOrDefault();
        if (g == null)
        {
            return new DataService.EmployeeEvaluation();
        }
        else
        {
            return g;
        }
    }
    public DataService.ManagerEvaluation GetManagerEvalObj(Guid gid)
    {
        var g = Model.ManagerEvaluations.Where(x => x.GoalId == gid).FirstOrDefault();
        if (g == null)
        {
            return new DataService.ManagerEvaluation();
        }
        else
        {
            return g;
        }
    }

    public string getnavstep(string text)
    {
        if (counter != 1)
            return "";
        string t = " data-step=\"" + stepNumber + "\" data-intro=\"" + text + "\" ";
        stepNumber++;
        return t;
    }
}
<link href="~/Content/style.css" rel="stylesheet" />
<script src="~/Scripts/jquery.mousewheel.js"></script>
<script src="~/Scripts/jquery.easing.1.3.js"></script>
<script src="~/Scripts/jquery.vaccordion.js"></script>
<link href="@Url.Content("~/content/jquery.jscrollpane.css")" rel="stylesheet" />
<link href="@Url.Content("~/content/jquery.jscrollpane.lozenge.css")" rel="stylesheet" />
<script type="text/javascript" src="@Url.Content("~/scripts/jquery.jscrollpane.min.js")"></script>
<link href="~/Content/jquery.rateyo.css" rel="stylesheet" />
<script src="~/Scripts/jquery.rateyo.min.js"></script>
<div id="ratingsoverlay" style="opacity:1.0; background-color:white;padding:10px;box-shadow:2px 2px 5px lightgray;z-index:10000; border-radius:5px; position:fixed;bottom:5px; left:5px;">
    <div style="opacity:1.0;background-color:white;display:block;height:20px;float:right;clear:right;">
        <a href="javascript:void(0);" id="toolbaractionforoverlay" style="text-decoration:underline;" onclick="minimizeoverlay()">Minimize</a>&nbsp; |&nbsp;
        <a href="javascript:void(0);" id="toolbaractionforoverlayclose" style="text-decoration:underline;" onclick="javascript:$('#ratingsoverlay').hide();">Close</a>
    </div>
    <table style="margin-top:25px; opacity:1.0;background-color:white; border:none;" cellpadding="5">
        <thead>
            <tr>
                <td>Rating</td>
                <td>Description</td>
            </tr>
        </thead>
        <tr>
            <td>Not a fit</td>
            <td>Not getting the job done and inhibiting results or performance of the company and others.</td>
        </tr>
        <tr>
            <td>Underachieving</td>
            <td>Performance fell short of expectations and needs to improve.  Full results/goals were not achieved</td>
        </tr>
        <tr>
            <td>Orange</td>
            <td>Accomplished goals and delivered work as expected.  Solid Performance.</td>
        </tr>
        <tr>
            <td>G’in the JD!</td>
            <td>Getting the job done, the Avalara way – with high quality and superior results. High Performance</td>
        </tr>
        <tr>
            <td>CRUSHED IT!</td>
            <td>Hit it out of the park – performance stands out at a level not achieved by others. Exceptional Performance.</td>
        </tr>
        </table>
   
    </div>
<div class="large-11 small-12 small-nomargin" style="top:0px;  height:auto;position: fixed;background-color:#F5F5F5; z-index:15;left:114px;" id="fixedheader1">
    <h2 style="margin-bottom:0px;">Self-Evaluation</h2><p>Click each goal title to view it. You can use the navigation keys (onscreen up and down arrows) to move to other goals or scroll with your mouse-wheel.</p>
    <div class="pull-left" style="width: 100%;">
        @if (Model.IsEditable)
        {
            <button class="btn btn-lg btn-success  pull-left" onclick="return publishreview('@Model.EmployeeDetails.gid')" style="margin-bottom:10px;"><span class="fi-flag" style="font-size:15px;padding-right:5px;">&nbsp;</span>Submit To Manager</button>
            <span id="publishmsg" style="padding:10px;margin-left:5px;"></span>
        }

      
        <a href="javascript:void(0);" style="font-size:12px;float:right;" onclick="javascript:$('#ratingsoverlay').fadeIn()">Click to view rating descriptions</a>
                    @*<div class="counter" id="overallrating">@Model.Rating.SelfOverallRating</div>*@
                </div>
    
            </div>
        </div>
<div id="evalgoalscontainer" class="row">
    <div class="modal fade" id="evalrating" role="dialog" style="padding-left: 5px;padding-right: 5px;margin-left:20px;margin-right: 25px;"
         data-step="1" data-intro="This represents an average of the ratings you give yourself.">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Self Overall Rating</h4>
                </div>
                <div class="modal-body">
                    <span style="padding-left:2px;color: olivedrab;font-size: 16px;">
                        How would you rate your overall performance this evaluation cycle? : 
                        <span id="selfoverallrating_value" >
                            <select class="ratingdropdown" id="overall_self_grading">
                                <option>-- Select One --</option>
                                <option value="1">Not a fit</option>
                                <option value="2">Underachieving</option>
                                <option value="3">Orange</option>
                                <option value="4">G'in the JD</option>
                                <option value="5">Crushed It!</option>s
                            </select>
                        </span>
                    </span>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Save</button>
                </div>
            </div>

        </div>
        @*<div data-initval="@Model.Rating.SelfOverallRating" class="selfoverallrating goalrating">*@
        @*<div class="progress" style="margin-top:3px;">
                <div style="width: @(Model.Rating.SelfOverallRating*20)%;" aria-valuemax="100" aria-valuemin="0" aria-valuenow="0" role="progressbar" class="progress-bar progress-bar-warning" id="selfoverallrating_progressbar"></div>
            </div>*@
    </div>
    <div class="large-12 end">

        <div id="va-accordion"
             @*data-position="center" data-intro="This is the list of goals. To view them you can click the headers or scroll with the mouse wheel. You may also use the green arrows to move through the goals."*@
             class="va-container" style="margin-top:11px;padding-right:10px;width:100%">
            <div class="va-nav">
                <span class="va-nav-prev" style="top:10px;" title="Previous goal">Previous</span>
                <span class="va-nav-next" style="bottom:10px;" title="Next goal">Next</span>
            </div>
            <div class="va-wrapper">
                @foreach (DataService.Goal g in Model.Goals)
                {

                    counter++;
                    var mgrevalObj = GetManagerEvalObj(g.gid);
                    <!--Individual Goals Template Start -->
                    <div class="va-slice va-slice-color-1" id="_@g.gid">
                        <h3 @Html.Raw(getnavstep("Clicking on these goal headers will expand/collapse the goals."))
                            class="va-title @(g.Fixed ? "CompetencyHeader" : "GoalHeader")">
                            @(g.Fixed ? "Success Trait" : "Goal") : @g.Title @*<span class="pull-right bold">Weightage : @g.Weightage %</span>*@
                        </h3>
                        <div class="va-content">
                            @if (ViewBag.ShowSelfRating == false && Model.ManagerEvaluations != null
                                && Model.ManagerEvaluations.Any(x => x.GoalId == g.gid)
                                && !string.IsNullOrWhiteSpace(Model.ManagerEvaluations.FirstOrDefault(x => x.GoalId == g.gid).Comment))
                            {
                                <ul class="nav nav-tabs">
                                    <li class="active" @Html.Raw(getnavstep("This is the description of the goal"))><a data-toggle="tab" href="#description_@g.gid">Description</a></li>
                                    <li @Html.Raw(getnavstep("This your manager's evaluation of your performance in this goal"))><a data-toggle="tab" href="#mgrevaluation_@g.gid">Manager Evaluation</a></li>
                                </ul>
                                <text>
                                    <div class="tab-content" style="float:left;">
                                        <div id="description_@g.gid" class="tab-pane fade in active">
                                </text>
                            }

                            <div class="scroll-pane" style="float:left;display:inline-block;width:50%;height:283px;overflow-y:auto;">

                                <p>
                                    @Html.Raw(g.Goal1)

                                </p>

                            </div>
                            @if (ViewBag.ShowSelfRating == false && Model.ManagerEvaluations != null
                                && Model.ManagerEvaluations.Any(x => x.GoalId == g.gid)
                                && !string.IsNullOrWhiteSpace(Model.ManagerEvaluations.FirstOrDefault(x => x.GoalId == g.gid).Comment))
                            {


                                @:</div>


                                <div id="mgrevaluation_@g.gid" class="mrgeval tab-pane fade">
                                    <div class="scroll-pane" style="float:left;display:inline-block;width:50%;height:283px;overflow-y:auto;">

                                        <div class="ratingcontainer pull-left">
                                            <p style="margin-bottom:0px!important;margin-top:5px;">Manager's Rating : </p><div id="ratingfor_mgr_@g.gid" data-initval="@mgrevalObj.GoalRating" class="goalrating mgrrating"></div><div class="counter">@mgrevalObj.GoalRating</div>
                                        </div>
                                        <br />
                                        <div class="q pull-left">
                                            <span class="quote">“</span>@Html.Raw(mgrevalObj.Comment)

                                        </div>

                                    </div>
                                    <div id="managerattachments" class="pull-left clear-fix" style="padding-top:10px;width:100%">
                                        @{
                                var mgrattachments = Model.Attachments.Where(x => x.EvaluationGoalId == mgrevalObj.Id && x.EvaluationType == DataService.EvaluationType.SELF_EVALUATION).ToList();
                                        }
                                        @if (mgrattachments != null && mgrattachments.Count > 0)
                                        {

                                            <p style="margin-bottom:0px!important;margin-top:5px;">Attachments (click to view) :</p>

                                            foreach (DataService.Attachment attachment in mgrattachments)
                                            {
                                                <span class="label label-default label-form">
                                                    <a class="attachment" target="_blank" href="@Url.Content("~/")evaluation/download?fileid=@attachment.AttachmentId">@attachment.FileName</a>
                                                </span>
                                            }
                                        }
                                    </div>

                                </div>
                                @:</div>
                            }
                            <div style="float:right;width:49%;padding-left:20px;margin-left:10px;border-left:thin solid gray;padding-right:20px;">
                                @if (Model.IsEditable)
                                {
                                    <p style="margin-bottom:0px;">Tell us how you achieved this goal in the current evaluation cycle:</p>
                                    <p style="clear:both;font-size:12px;margin-bottom:0px;">(You can attach emails, images, pdfs or documents to support your self-evaluation)</p>
                                    <textarea data-goaltitle="@g.Title.Replace("'","").Replace("\"","")" @Html.Raw(getnavstep("Enter your comments here for this goal."))
                                              data-goalid="@g.gid" id="selfeval_@g.gid" style="width:100%;height:200px;">
                                        @GetValidEmployeeEvalObj(g.gid).Comment
                                        </textarea>
                                        <script type="text/javascript">
                                            var editor_@(g.gid.ToString().Replace("-","_")) = CKEDITOR.replace( 'selfeval_@g.gid',{
                                                height: 200,  removePlugins: 'elementspath' ,resize_enabled:false,
                                                toolbar :
                                                [
                                                    { name: 'basicstyles', items : [ 'Bold','Italic' ] },
                                                    { name: 'paragraph', items : [ 'NumberedList','BulletedList' ] },
                                                    { name: 'styles', items : [ 'Styles','Format' ] }

                                                ]
                                            } );
                                            editor_@(g.gid.ToString().Replace("-","_")).on("change",function (evt) {
                                                $('#selfeval_@g.gid').val(evt.editor.getData())
                                            });
                                        </script>
                                        <text>

                                            <input data-goaltitle="@g.Title.Replace("'","").Replace("\"","")" type="hidden" id="numericRating_@g.gid" data-goalid="@g.gid" class="numericRating" value="@GetValidEmployeeEvalObj(g.gid).GoalRating" />
                                        </text>
                                        <div class="ratingcontainer " @Html.Raw(getnavstep("Rate yourself on this goal by moving your mouse to select the stars and clicking."))>
                                            <p style="margin-bottom:0px!important;margin-top:5px;">Rate your self : </p>@*<div id="ratingfor_@g.gid" data-initval="@GetValidEmployeeEvalObj(g.gid).GoalRating" class=" goalrating selfrating">*@
                                          <select class="ratingdropdown" id="grading_@g.gid" onclick="savegrading('@g.gid',$(this));">
                                                <option>-- Select One --</option>
                                                <option value="1">Not a fit</option>
                                                <option value="2">Underachieving</option>
                                                <option value="3">Orange</option>
                                                <option value="4">G'in the JD</option>
                                                <option value="5">Crushed It!</option>s
                                            </select>
                                            <label id="ratingdesc_@g.gid" class="ratingdesc"></label>
                                            @*</div>*@

                                        </div>
                                        @*</div>*@
                                        <button onclick="AddAttachments('@g.gid')"
                                                @Html.Raw(getnavstep("After you have saved the comment, you can attach files to support your evaluation comments and self-rating. A maximum of 5 files can be attached per goal."))
                                                class="btn btn-info pull-right" style="margin-left:5px;margin-top:5px;" data-toggle="modal" data-target="#attachmentscontainer_popup">
                                            Attach
                                        </button>
                                        <button @Html.Raw(getnavstep("After you have entered the comment and rated yourself, save your self-evaluation by clicking this SAVE button."))
                                                style="margin-top: 5px;" id="save_@g.gid" class="btn btn-success pull-right" data-goalid="@g.gid" onclick="SaveSelfEvaluation('@g.gid')">
                                            Save
                                        </button>
                                }
                                else
                                {
                                    <h3 style="margin-bottom:15px;color:white;font-weight:300;">Your self-evaluation:</h3>
                                    <div class="scroll-pane" style="margin-bottom:15px;float:left;display:inline-block;width:100%;height:200px;overflow-y:auto;">
                                        <p>
                                            @Html.Raw(GetValidEmployeeEvalObj(g.gid).Comment)

                                        </p>
                                    </div>
                                    <div class="ratingcontainer pull-left">
                                        <p style="margin-bottom:0px!important;margin-top:5px;">Your self-rating : </p><div class="selfratingcounter" id="rating_@g.gid">@translateRating(GetValidEmployeeEvalObj(g.gid).GoalRating.HasValue ? GetValidEmployeeEvalObj(g.gid).GoalRating.Value : 0) </div>
                                    </div>
                                }

                                <div id="selfattachments_@g.gid" class="pull-left clear-fix" style="padding-top:10px;width:100%">

                                    @{var se = GetValidEmployeeEvalObj(g.gid);
                                    var attachments = Model.Attachments.Where(x => x.EvaluationGoalId == se.Id && x.EvaluationType == DataService.EvaluationType.SELF_EVALUATION).ToList();
                                    }
                                    @if (attachments != null && attachments.Count > 0)
                                    {

                                        <p style="margin-bottom:0px!important;margin-top:5px;">Attachments (click to view) :</p>

                                        foreach (DataService.Attachment attachment in attachments)
                                        {
                                            <span class="label label-default label-form">
                                                <a class="attachment" target="_blank" href="@Url.Content("~/")evaluation/download?fileid=@attachment.AttachmentId">@attachment.FileName</a>
                                            </span>
                                        }
                                    }
                                </div>

                            </div>

                        </div>
                    </div>
                            <!--Individual Goals Template End-->
                }
            </div>

        </div>
    </div>
</div>

<div id="attachmentscontainer_popup" class="modal fade" role="dialog">
    <div class="modal-dialog  large-8 small-5">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Attach Files : </h4>
            </div>
            <div class="modal-body">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

<style>
    .dropdownContain {
        background-color: #fff;
        height: 100px;
        position: relative;
        width: 150px;
        padding: 10px;
        box-shadow: 10px 10px 5px #888888;
    }

        .dropdownContain:after {
            content: ' ';
            height: 0;
            position: absolute;
            width: 0;
            border: 10px solid transparent;
            border-top-color: #fff;
            top: 100%;
            left: 50%;
            box-shadow: 10px 10px 5px #888888;
        }

    ul.ratingul li a {
        background: none;
        color: #000;
        font-family: Verdana;
        font-size: 11px;
        padding: 0px 0px;
        text-transform: none;
    }
</style>

<script>

    var evalchanged = [];
    var ratingchanged=[];
</script>
<script type="text/javascript">
    var automove=false;
    var currentGoalForAttachments="";
    var selectedmenuid = "goals";
    var ratingoverlayheight=0;
    function minimizeoverlay()
    {
        if($("#toolbaractionforoverlay").html()=="Minimize")
        {
            if(ratingoverlayheight==0)
            {
                ratingoverlayheight = $("#ratingsoverlay").height();
            }
            $("#ratingsoverlay").animate({ height: "25px"}, {duration: 2000,    specialEasing: {
                width: "linear",
                height: "easeOutBounce"
            }});
            $("#toolbaractionforoverlay").html("Maximize");
        }
        else
        {
            $("#ratingsoverlay").animate({ height: ratingoverlayheight+"px"}, {duration: 2000,    specialEasing: {
                width: "linear",
                height: "easeOutBounce"
            }});
            $("#toolbaractionforoverlay").html("Minimize");
        }
    }
    function AddAttachments(goalid)
    {
        $("#attachmentscontainer_popup .modal-body").load("@Url.Content("~/Evaluation/FileUpload?goalid=")"+ goalid+"&empid=@ViewBag.Me.gid.ToString()&hashvalue="+new Date().getTime(), function(){
            $(".fileupload-buttonbar div:first").removeClass("col-lg-7");
            $(".fileupload-buttonbar div:first").next().removeClass("col-lg-5");
            //$(".fileupload-buttonbar div:first").find(".delete").remove();
            //$(".fileupload-buttonbar div:first").find(".cancel").remove();
            //$(".fileupload-buttonbar div:first").find(".toggle").remove();
        });
        return false;
    }
    function setGoalID(id)
    {
        currentGoalForAttachments = id;

    }
    function verifychanges()
    {
        if(ratingchanged.length>0 || evalchanged.length>0)
        {
            alert("You have unsaved changes. Please click 'SAVE' button on evaluations/ratings that you have modified then try again.");
            return false;
        }
        return true;
    }
    function removeFromEvalChanged(goalid){
        var idx=-1;
        for(i=0; i< evalchanged.length;i++)
        {
            if(evalchanged[i]==goalid)
            {
                idx=i;
                break;
            }
        }
        if(idx>=0)
        {
            evalchanged.splice(idx,1);
        }
    }

    function savegrading(goalid, selectControl)
    {
        $("#numericRating_"+goalid).val(selectControl.val());
        $("#ratingdesc_"+goalid).html(getRatingDescription(selectControl.val()));
    }
    function getRatingDescription(ratingValue)
    {
        var rating  = parseInt(ratingValue);
        switch(rating)
        {
            case 1:return "Hit it out of the park – performance stands out at a level not achieved by others. Exceptional Performance.";
                break;
            case 2:return "Getting the job done, the Avalara way – with high quality and superior results. High Performance";
                break;
            case 3:return "Accomplished goals and delivered work as expected.  Solid Performance.";
                break;
            case 4:return "Performance fell short of expectations and needs to improve.  Full results/goals were not achieved.";
                break;
            case 5:return "Not getting the job done and inhibiting results or performance of the company and others.";
                break;
            default:return " ";
                break;
        }
    }

    function removeFromRatingChanged(goalid){
        var idx=-1;
        for(i=0; i< ratingchanged.length;i++)
        {
            if(ratingchanged[i]==goalid)
            {
                idx=i;
                break;
            }
        }
        if(idx>=0)
        {
            ratingchanged.splice(idx,1);
        }
    }
    function publishreview(empId) {
        if(!verifychanges())
            return false;
        var continuePublishing = true;
        $("textarea").each(function(i,o){
            if($.trim($(o).val())=="")
            {
                alert("Please fill in your self-evaluation comments for "+ $(o).data("goaltitle")+" !");
                continuePublishing = false;
                return false;
            }
        });
        if(!continuePublishing)
            return false;
        $(".numericRating").each(function(i,o){
            if($.trim($(o).val())=="" || $.trim($(o).val())=="0")
            {
                alert("You need to rate yourself for "+$(o).data("goaltitle"));
                continuePublishing = false;
                return false;
            }
        });
        if($("#overall_self_grading").val()=="" || $("#overall_self_grading").val()==null)
        {
            alert("Please rate yourself overall!");
            continuePublishing = false;
            return false;
        }

        if(!continuePublishing)
            return false;

        $("#evalrating").modal();
        $("#publishmsg").hide();
        $("#evalrating").on('hidden.bs.modal',function(){

            if($("#overall_self_grading").val()=="" || $("#overall_self_grading").val()==null)
            {
                alert("Evaluation not published!")
                return false;
            }

            $.post("@Url.Content("~/evaluation/PublishSelfEvaluation")",{"SelfOverallRating":$("#overall_self_grading").val()},function(r){
                $("#publishmsg").show();
                if(r=="error")
                {
                    $("#publishmsg").html("Could not publish.").addClass("alertpublished_error");
                }
                else
                {
                    $("#publishmsg").addClass("alertpublished").html("Published successfully!");
                    $("button").attr("disabled","disabled");
                    window.location.reload();
                    return;
                }

                setTimeout(function(){
                    $("#publishmsg").removeClass("alertpublished").removeClass("alertpublished_error").hide();//.html("Publish Self-Evaluation");
                },2000);
            });
        });

        
    }
    function SaveSelfEvaluation(goalid)
    {

        var selfeval = $("#selfeval_"+goalid).val();
        var selfrating = $("#numericRating_"+goalid).val();
        if(selfrating=="0" || selfrating=="")
        {
            alert("You need to rate yourself. ");
            return false;
        }
        if($.trim(selfeval)=="")
        {
            alert("Please fill in your self-evaluation comments in the textbox!");
            return false;
        }
        removeFromEvalChanged(goalid);
        removeFromRatingChanged(goalid);
        $("#savemsg_"+goalid).hide();
        $.post("@Url.Content("~/evaluation/SaveSelfEvaluation")",{"goalid":goalid,"selfeval":selfeval,"selfrating":selfrating},function(r){
            if(r.msg=="error")
            {
                $("#save"+goalid).addClass("alertsaved_error").html("Error!");
            }
            else
            {
                $("#save_"+goalid).addClass("alertsaved").html("Saved successfully!");
                $("#selfoverallrating_progressbar").css("width",r.viewmodel.Rating.SelfOverallRating*20+"%");
                var translatedRating="";
                switch(Math.round(r.viewmodel.Rating.SelfOverallRating))
                {
                    case 1:translatedRating ="Not a fit";
                        break;
                    case 2:translatedRating ="Underachieving";
                        break;
                    case 3:translatedRating ="Orange";
                        break;
                    case 4:translatedRating ="G'in the JD";
                        break;
                    case 5:translatedRating ="Crushed It!";
                        break;
                    default:translatedRating="Unrated";
                        break;
                }
                $("#overall_self_grading").val(r.viewmodel.Rating.SelfOverallRating);
                //$(".selfoverallrating").rateYo("option", "rating", r.viewmodel.Rating.SelfOverallRating);
                //$(".selfoverallrating").next(".counter").text(r.viewmodel.Rating.SelfOverallRating);
            }

            setTimeout(function(){
                $("#save_"+goalid).removeClass("alertsaved").removeClass("alertsaved_error").html("Save");
            },2000);
        });
    }


    function adjustHeaderWidth()
    {
        //$("#fixedheader").css("width","100%");
        //setTimeout(function(){
        //    var header= $("#fixedheader");
        //    header.width(header.width() -  header.position().left);
        //},200);

    }

    function loadAttachments()
    {
        $("#selfattachments_"+currentGoalForAttachments).load("@Url.Content("~/evaluation/AttachmentList?goalid=")"+  currentGoalForAttachments + "&gid=@ViewBag.Me.gid.ToString()");
    }
    var _updatecounter=0;
    var updateCounter = function (rating) {
        _updatecounter++;
        var translatedRating="";
        switch(rating)
        {
            case 1:translatedRating ="Not a fit";
                break;
            case 2:translatedRating ="Underachieving";
                break;
            case 3:translatedRating ="Orange";
                break;
            case 4:translatedRating ="G'in the JD";
                break;
            case 5:translatedRating ="Crushed It!";
                break;
            default:translatedRating="Unrated";
                break;
        }
        $(this).next(".counter").text(translatedRating);
        var goalid =$(this).attr("id").replace("ratingfor_","");
        $("#numericRating_"+goalid).val(rating);
    };

    var setCounter = function(rating)
    {

        if(_updatecounter>0)
        {
            console.log($(this).next(".counter").text() + " --- " + rating);
            var ratingcounter =  $(this).next(".counter");
            var found =false;
            for(i=0;i<ratingchanged.length;i++)
            {
                if(ratingchanged[i]==ratingcounter.data("goalid"))
                {
                    found=true;
                    break;
                }
            }
            if(!found)
                ratingchanged.push( ratingcounter.data("goalid"));
        }

        var translatedRating="";
        switch(rating)
        {
            case 1:translatedRating ="Not a fit";
                break;
            case 2:translatedRating ="Underachieving";
                break;
            case 3:translatedRating ="Orange";
                break;
            case 4:translatedRating ="G'in the JD";
                break;
            case 5:translatedRating ="Crushed It!";
                break;
            default:translatedRating="Unrated";
                break;
        }
        $(this).next(".counter").text(translatedRating);
    }
    $(function () {
        $('#va-accordion').vaccordion({
            accordionW: "100%",
            accordionH: (500+50*@Model.Goals.Count),
            expandedHeight	: 550,
            visibleSlices: @Model.Goals.Count,
            animOpacity: 1.0,
            contentAnimSpeed: 100
        });
        $(".mgrrating").rateYo({
            precision: 0,
            spacing: "10px",
            onSet: updateCounter,
            normalFill: "#000",
            readOnly: true,
            onChange: updateCounter,
            starWidth: "20px"
        });

        //$(".selfoverallrating").rateYo({
        //    maxValue: 5,
        //    numStars: 1,
        //    starWidth: "30px",
        //    readOnly:true,
        //    normalFill: "#000",
        //    onSet: updateCounter,
        //    onChange: updateCounter,

        //    precision:2
        //});

        $(".selfrating").rateYo({
            precision: 0,
            spacing: "10px",
            onSet: setCounter,
            normalFill: "#000",
            onChange: updateCounter
            @if (!Model.IsEditable)
            {
                <text>, readOnly: true</text>
            }
        });
        $(".goalrating").each(function(i,o){
            if($(o).data("initval")!=null && $(o).data("initval")!="")
            {
                $(o).rateYo("option", "rating", $(o).data("initval"));
            }
        });

        //$($(".va-slice")[0]).find(".va-title").click();
        setTimeout(function(){
            $($(".va-slice")[0]).find(".va-title").click();
        },500);

        setWidth() ;

        //

    });

    function setWidth() {
        setTimeout(function(){
            adjustHeaderWidth();
            var c = $($(".va-slice")[0]).find(".scroll-pane").width();
            if(c<100)
            {
                setWidth();
                return;
            }
            $(".scroll-pane").each(function(i,o){
                $(o).css("width",c);
            });

            $(".scroll-pane").css("max-width",c);


        },500);
    }

    function externalEventHandler_Navigate() {
        var idoftitle="";
        $(".va-slice").each(function(i,o){
            if($(o).data("expanded"))
            {
                idoftitle = $(o).attr("id");

                return false;
            }
        });
        $(".va-slice").each(function(i,o){
            $("#"+$(o).attr("id") +" .va-title").removeClass("expandedpane");
        });
        $("#"+idoftitle +" .va-title").addClass("expandedpane");
        if(automove)// for first time only it will be false so that the user can see the full title
            setTimeout(function(){
                //  window.location.href="#"+idoftitle;
            },250);

        automove=true;
        setTimeout(function(){
            if($(".scroll-pane:visible").data("eval_scrollpane")=="initialized")
                return;
            $('.scroll-pane:visible').jScrollPane({
                showArrows: true,
                horizontalGutter: 10
            });
        },350);

        $(".maincontent").css("height",$("#evalgoalscontainer").height()+151);
    }
    $(document).ready(function(){
        
        $("#attachmentscontainer_popup").on('hide.bs.modal', function () {
            loadAttachments();
        });
        $("textarea").change(function(){
            var found =false;
            for(i=0;i<evalchanged.length;i++)
            {
                if(evalchanged[i]==$(this).data("goalid"))
                {
                    found=true;
                    break;
                }
            }
            if(!found)
                evalchanged.push( $(this).data("goalid"));
        });
        adjustHeaderWidth();
        $(window).resize(function(){
            adjustHeaderWidth();
        });
        $(".maincontent").css("height",$("#evalgoalscontainer").height()+151);
        starttour("evaluationselfevaluation");

        $(".numericRating").each(function(i,o){
            $("#grading_"+$(o).data("goalid")).val($(o).val());

        });
    });
</script>
<style>
    #selfoverallrating_value {
        /*background-color: #374659;*/
        border-radius: 5px;
        color: white;
        margin-bottom: 3px;
        padding: 5px;
        font-weight: bold;
    }

    .va-title.expandedpane {
        background-color: rgb(55, 70, 89) !important;
        color: white !important;
    }

    .alertpublished {
        background-color: none;
        border-color: lightblue;
        border-width: thin;
        border-style: solid;
        border-radius: 5px;
    }

    .alertpublished_error {
        border-color: red;
        background-color: none;
        border-width: thin;
        border-style: solid;
        border-radius: 5px;
    }

    .alertsaved, .alertsaved_error {
        background-color: #33414E !important;
        border-color: lightblue;
    }

    .alertsaved_error {
        border-color: red;
    }

    .va-slice {
        cursor: default !important;
        border-bottom-style: double;
    }

    .va-title {
        cursor: pointer;
    }

    .va-slice ul.nav-tabs li a {
        background-color: gray;
        color: lightgray;
    }

    .va-slice ul.nav-tabs li.active a {
        background-color: white;
        color: #555;
    }

    .tab-content {
        padding-top: 10px;
    }

    .scroll-pane li, .scroll-pane span, .scroll-pane label, .scroll-pane p, .scroll-pane div {
        font-family: Georgia,serif;
        font-size: 15px;
        font-style: italic;
    }

    .nav-tab, .tab-content {
    }

    .label-default {
        background-color: #777;
        margin-left: 5px;
    }

        .label-default a {
            color: white;
        }

    table.table td {
        vertical-align: middle !important;
    }

        table.table td:nth-child(4) {
            text-align: right !important;
        }

    div.ratingcontainer {
        position: relative;
    }

    div.counter::before, div.counter *::before {
        border-color: transparent darkorange transparent transparent;
        border-style: solid;
        border-width: 5px 5px 5px 0;
        content: "";
        display: block;
        height: 0;
        left: -10px;
        margin-top: -5px;
        position: relative;
        top: 50%;
        width: 0;
    }


    div.counter {
        background-color: darkorange;
        color: #000;
        display: block;
        font-size: 15px;
        height: 25px;
        line-height: 0;
        margin-top: -10px;
        min-width: 20px;
        padding: 5px;
        position: absolute;
        left: 210px;
        top: 50%;
        min-width: 100px;
        transform: translateY(-50%);
    }

    div.counter {
        float: left;
        font-weight: bold;
        margin-left: 10px;
        margin-top: 15px;
    }

    div.mrgeval div.counter {
        margin-top: 7px;
    }

    .va-slice-color-1 {
        background-color: #FFF;
    }

    .va-title {
        font-size: 16px;
        font-weight: 300;
        color: gray !important;
        background-color: #eee;
        margin-left: 0px !important;
        padding-left: 10px;
    }

    .va-wrapper {
        background: none;
    }

    .va-slice p {
        font-size: 15px;
        color: #888;
    }

    .scroll-pane,
    .scroll-pane-arrows {
        width: 100%;
        height: 200px;
        overflow: auto;
    }

    .horizontal-only {
        height: auto;
        max-height: 200px;
    }

    .jspDrag {
        background: #8b8b9f none repeat scroll 0 0;
    }

    .jspArrowUp {
        background-position: 85px -4px !important;
    }

    .jspArrowDown {
        background-position: 0px 0px !important;
    }

    .jspArrow {
        background-image: none !important;
        border-radius: 10px;
    }

    .jspVerticalBar .jspTrack {
        width: 10px !important;
    }

    .jspVerticalBar {
        width: 11px !important;
        border-radius: 5px;
    }

    .va-nav span {
        height: 40px !important;
    }

    .quote {
        font-size: 50pt;
        line-height: 23px;
        vertical-align: middle;
    }

    .va-slice .q {
        color: #888;
        font-size: 15px;
    }

    .va-slice .q {
        font-family: Georgia,serif;
        font-style: italic;
        font-weight: normal;
        line-height: 1.6;
        margin-bottom: 1.25rem;
        text-rendering: optimizelegibility;
        margin-top: 30px;
        clear: left;
    }

    #evalgoalscontainer {
        position: relative;
        top: 118px;
    }

    #overallrating {
        margin: 0;
        position: relative;
        right: -45px;
        top: -25px;
    }

    H3 span {
        font-family: georgia;
        font-size: 14px;
        font-style: italic;
        font-weight: normal;
        margin-right: 10px;
        text-transform: none;
    }

    #fixedheader1 h2 {
        font-size: 24px;
    }

    .CompetencyHeader {
        color: yellow;
    }

    html, .off-canvas-wrap {
        overflow-x: auto !important;
    }
</style>
@*/*
      *
        *
        *
        *  For the ratings
        *
        *
        *
        *
    */*@
<style>
    .selfratingcounter {
    
        background-color:orange;
        font-weight:600;
        text-align:center;
        color:black;
        font-size:15pt;
        padding:5px;
        border-radius:5px;
    }
    .ratingdropdown {
        width:100%;
    }
    .ratingdesc {
      color: #374659;
    font-family: Georgia,serif,helvetica;
    font-size: 15px;
    font-style: italic;
    font-weight: 300;
    }
</style>