@model MvcApplication2.ViewModel.EvaluationViewModel
@{
    ViewBag.Title = "Reportee-Evaluation";
    Layout = "~/Views/Shared/_2Col_Layout.cshtml";



}
<script src="~/Scripts/ckeditor/ckeditor.js"></script>
@functions{
    public string translateRating(int rating)
    {
        string translatedRating = "";
        switch (rating)
        {
            case 1: translatedRating = "Not a fit";
                break;
            case 2: translatedRating = "Underachieving";
                break;
            case 3: translatedRating = "Orange";
                break;
            case 4: translatedRating = "G'in the JD";
                break;
            case 5: translatedRating = "Crushed It!";
                break;
            default: translatedRating = "Unrated";
                break;
        }
        return translatedRating;
    }
    public DataService.EmployeeEvaluation GetValidEmployeeEvalObj(Guid gid)
    {
        var g = Model.SelfEvaluations.Where(x => x.GoalId == gid).FirstOrDefault();
        if (g == null)
        {
            return new DataService.EmployeeEvaluation();
        }
        else
        {
            return g;
        }
    }
    public DataService.ManagerEvaluation GetManagerEvalObj(Guid gid)
    {
        var g = Model.ManagerEvaluations.Where(x => x.GoalId == gid).FirstOrDefault();
        if (g == null)
        {
            return new DataService.ManagerEvaluation();
        }
        else
        {
            return g;
        }
    }
}
<link href="~/Content/style.css" rel="stylesheet" />
<script src="~/Scripts/jquery.mousewheel.js"></script>
<script src="~/Scripts/jquery.easing.1.3.js"></script>
<script src="~/Scripts/jquery.vaccordion.js"></script>
<link href="@Url.Content("~/content/jquery.jscrollpane.css")" rel="stylesheet" />
<link href="@Url.Content("~/content/jquery.jscrollpane.lozenge.css")" rel="stylesheet" />
<script type="text/javascript" src="@Url.Content("~/scripts/jquery.jscrollpane.min.js")"></script>
<script src="~/Scripts/jQuery.ExDent.js"></script>
<link href="~/Content/jquery.rateyo.css" rel="stylesheet" />
<script src="~/Scripts/jquery.rateyo.min.js"></script>
<div id="ratingsoverlay" style="opacity:1.0; background-color:white;padding:10px;box-shadow:2px 2px 5px lightgray;z-index:10000; border-radius:5px; position:fixed;bottom:5px; left:5px;">
    <div style="opacity:1.0;background-color:white;display:block;height:20px;float:right;clear:right;">
        <a href="javascript:void(0);" id="toolbaractionforoverlay" style="text-decoration:underline;" onclick="minimizeoverlay()">Minimize</a>&nbsp; |&nbsp;
        <a href="javascript:void(0);" id="toolbaractionforoverlayclose" style="text-decoration:underline;" onclick="javascript:$('#ratingsoverlay').hide();">Close</a>
    </div>
    <table style="margin-top:25px; opacity:1.0;background-color:white; border:none;" cellpadding="5">
        <thead>
            <tr>
                <td>Grading</td>
                <td>Description</td>
            </tr>
        </thead>
        <tr>
            <td>Not a fit</td>
            <td>Not getting the job done and inhibiting results or performance of the company and others.</td>
        </tr>
        <tr>
            <td>Underachieving</td>
            <td>Performance fell short of expectations and needs to improve.  Full results/goals were not achieved</td>
        </tr>
        <tr>
            <td>Orange</td>
            <td>Accomplished goals and delivered work as expected.  Solid Performance.</td>
        </tr>
        <tr>
            <td>G’in the JD!</td>
            <td>Getting the job done, the Avalara way – with high quality and superior results. High Performance</td>
        </tr>
        <tr>
            <td>CRUSHED IT!</td>
            <td>Hit it out of the park – performance stands out at a level not achieved by others. Exceptional Performance.</td>
        </tr>
        </table>
   
    </div>

<div class="large-11 small-12 small-nomargin" style="top:0px; height:auto;position: fixed;background-color:#F5F5F5; z-index:15;left:114px;" id="fixedheader1">
    <h2 style="margin-bottom:0px;">@Model.EmployeeDetails.FirstName's Evaluation
        
    </h2><p>Click each goal title to view it. You can use the navigation keys (onscreen up and down arrows) to move to other goals or scroll with your mouse-wheel.</p>
    <div class="pull-left" style="width: 100%;">
        @if (Model.IsEditable)
        {
            <button id="sendtohrbutton" class="btn btn-lg btn-success" data-toggle="modal" data-target="#finalcomment_popup" @*onclick="return publishreview('@Model.EmployeeDetails.gid')"*@ style="margin-bottom:10px;@(Model.Goals.FirstOrDefault(x => !x.Fixed).Status == DataService.GoalStatus.HR_APPROVED?"display:none;":"") "><span class="fi-checkbox" style="font-size:15px;padding-right:5px;">&nbsp;</span>Send To HR</button>
            <span id="publishmsg" style="padding:10px;margin-left:5px;"></span>
            if (Model.Goals.FirstOrDefault(x => !x.Fixed).Status < DataService.GoalStatus.MANAGER_EVAL_PUBLISHED)
            {
                <input type="button" class="btn btn-lg btn-danger" data-toggle="modal" data-target="#reject_popup" style="margin-bottom:10px;" value="Reject" />
                <span id="rejectmsg" style="padding:10px;margin-left:5px;"></span>
            }

        }
        @if (Model.Goals.FirstOrDefault(x => !x.Fixed).Status == DataService.GoalStatus.HR_APPROVED)
        {
            <button id="finalpublish" class="btn btn-lg btn-info" onclick="return finalpublishreview('@Model.EmployeeDetails.gid')" style="margin-bottom:10px;"><span class="fi-flag" style="font-size:15px;padding-right:5px;">&nbsp;</span><span class="text">Publish</span></button>
        }
        @if (Model.Goals.FirstOrDefault(x => !x.Fixed).Status == DataService.GoalStatus.PUBLISHED)
        {
            <div style="float:left;">
                @if(Model.Conclusion!=null && !string.IsNullOrEmpty(Model.Conclusion.meetingsummary))
                {
                    <a id="showsummary" onclick="return showsummary()" style="margin-bottom:10px;">Summary</a>
                }
                @if (Model.Conclusion != null && !string.IsNullOrEmpty(Model.Conclusion.training))
                {
                    <a style="margin-left:10px;" id="showtraining" onclick="return showtraining()" style="margin-bottom:10px;">Training</a>
                }
            </div>
        }
      
        <div class="pull-right" id="selfevalrating" style="margin-left:20px;margin-right: 25px;">
            @*<span style="padding-left:2px;">Self Overall Rating:</span>
            <div data-initval="@Model.Rating.SelfOverallRating" class="selfoverallrating goalrating">
            </div>*@

            <span style="padding-left:2px;">Self Overall Grade: <span id="selfoverallrating_value" class="btn-info">@translateRating((int)Math.Round(Model.Rating.SelfOverallRating.HasValue ? Model.Rating.SelfOverallRating.Value : 0))</span>
            <br />    
                <br />
            <a href="javascript:void(0);" style="font-size:12px;font-style:italic;font-weight:bold;" onclick="javascript:$('#ratingsoverlay').fadeIn()">Click to view grading descriptions</a>
            </span>
        </div>
        <div class="pull-right" id="evalrating" style="margin-left:20px;margin-right: 25px;">
            @*<span style="padding-left:2px;">Overall rating:</span>*@
            <span style="padding-left:2px;">Manager Overall Grade: 
                @if (Model.IsEditable)
                {
                    <span id="manageroverallrating_value">
                        <select class="ratingdropdown" id="overall_manager_grading" data-value="@(Model.Rating.ManagerOverllRating.HasValue?Model.Rating.ManagerOverllRating.Value : 0)">
                            <option>-- Select One --</option>
                            <option value="1">Not a fit</option>
                            <option value="2">Underachieving</option>
                            <option value="3">Orange</option>
                            <option value="4">G'in the JD</option>
                            <option value="5">Crushed It!</option>s
                        </select>
                    </span>
                }
                else
                {
                    <span id="manageroverallrating_value" class="btn-info">@translateRating((int)Math.Round(Model.Rating.ManagerOverllRating.HasValue ? Model.Rating.ManagerOverllRating.Value : 0))</span>
                }
                    </span>
            @*<div data-initval="@Model.Rating.ManagerOverllRating" class="mgroverallrating goalrating">
    </div>

    <div class="counter" id="overallrating">@Model.Rating.ManagerOverllRating</div>*@
        </div>
    </div>
</div>
<div id="evalgoalscontainer" class="row">
    <div class="large-12 end">
        <div id="rejectionMessage" style="display:none;" class="alert alert-warning">
        </div>
        <div id="va-accordion" class="va-container" style="margin-top:26px;padding-right:10px;width:100%">
            <div class="va-nav">
                <span class="va-nav-prev" style="top:10px;" title="Previous goal">Previous</span>
                <span class="va-nav-next" style="bottom:10px;" title="Next goal">Next</span>
            </div>
            <div class="va-wrapper">
                @foreach (DataService.Goal g in Model.Goals.OrderBy(x => x.Fixed).ThenByDescending(y => y.EmployeeId).ToList())
                {
                    DataService.EmployeeEvaluation empEval = GetValidEmployeeEvalObj(g.gid);
                    DataService.ManagerEvaluation mgrE = GetManagerEvalObj(g.gid);
                    <!--Individual Goals Template Start -->
                    <div class="va-slice va-slice-color-1" id="_@g.gid">
                        <h3 class="va-title @(g.Fixed ? "CompetencyHeader" : "GoalHeader")">@(g.Fixed ? (g.EmployeeId.HasValue ? "Avalara's People Management Goal" : "Success Trait") : "Goal") : @g.Title @*<span class="pull-right bold">Weightage : @g.Weightage %</span>*@</h3>
                        
                        <div class="va-content">
                            <ul class="nav nav-tabs" style="max-width:100%">
                                <li class="active"><a data-toggle="tab" href="#description_@g.gid">Description</a></li>
                                <li><a data-toggle="tab" href="#selfevaluation_@g.gid">Self Evaluation</a></li>
                            </ul>
                            <div class="tab-content" style="float:left;width:50%">
                                <div id="description_@g.gid" class="tab-pane fade in active">
                                    <div class="scroll-pane" style="float:left;display:inline-block;width:100%;height:283px;overflow-y:auto;">
                                       
                                        <p>
                                            @Html.Raw(g.Goal1)
                                        </p>

                                    </div>
                                </div>
                                <div id="selfevaluation_@g.gid" class="selfeval tab-pane fade " >
                                    <div class="scroll-pane" style="float:left;display:inline-block;width:50%;height:283px;overflow-y:auto;">
                                        @{ var se = GetValidEmployeeEvalObj(g.gid);
                                         var attachments = Model.Attachments.Where(x => x.EvaluationGoalId == se.Id && x.EvaluationType == DataService.EvaluationType.SELF_EVALUATION).ToList();
                                        }
                                        <div class="ratingcontainer pull-left">
                                            <p style="margin-bottom:0px!important;margin-top:5px;">Self-Grading : </p><div class="readonlyrating" id="rating_@g.gid">@translateRating(GetValidEmployeeEvalObj(g.gid).GoalRating.HasValue ? GetValidEmployeeEvalObj(g.gid).GoalRating.Value : 0) </div>
                                        </div>
                                        @if (attachments != null && attachments.Count > 0)
                                        {
                                            <div class="pull-right" style="padding-left:15px">
                                                <span class="fi-checkbox fi-comment" style="font-size:20px;color:#374659;"></span>
                                                <a onclick="toggleattachment(false,'@g.gid')">View Employee Comment (click)</a>
                                            </div>
                                            <div class="pull-right" style="padding-left:15px;">
                                                <span class="fi-checkbox fi-paperclip" style="font-size:20px;color:#374659;"></span>
                                                <a onclick="toggleattachment(true,'@g.gid')">@attachments.Count attachment(s) (click)</a>
                                            </div>
                                        }
                                        <br />
                                        <div class="q pull-left" id="employeecomment_@g.gid" >
                                            <span class="quote">“</span>@Html.Raw(empEval.Comment)
                                        </div>
                                        <div id="reporteeattachments_@g.gid" class="pull-left clear-fix" style="display:none; padding-top:10px;width:100%">

                                            @if (attachments != null && attachments.Count > 0)
                                            {

                                                <p style="margin-bottom:0px!important;margin-top:5px;">@(attachments != null ? attachments.Count.ToString() : "") Attachments (click to view) :</p>

                                                foreach (DataService.Attachment attachment in attachments)
                                                {
                                                    <span class="label label-default label-form">
                                                        <a class="attachment" target="_blank" href="@Url.Content("~/")evaluation/download?fileid=@attachment.AttachmentId">@attachment.FileName</a>
                                                    </span>
                                                }
                                            }
                                        </div>
                                    </div>
                                   

                                </div>

                            </div>


                            <div style="float:right;width:49%;padding-left:20px;margin-left:10px;border-left:thin solid gray;padding-right:20px;">
                                @if (Model.IsEditable)
                                {
                                    <p style="margin-bottom:0px;">Evaluate @Model.EmployeeDetails.FirstName's Performance:</p>
                                    <p style="clear:both;font-size:12px;margin-bottom:0px;">(You can attach emails, images, pdfs or documents to support your evaluation)</p>
    <textarea id="reviewcomment_@g.gid" class="managercomments @(string.IsNullOrWhiteSpace(empEval.Comment)?"":"commentrequired")" data-goalid="@g.gid" style="width:100%;height:100px;">@mgrE.Comment</textarea>
                                    <script type="text/javascript">
                                        var editor_@(g.gid.ToString().Replace("-","_")) = CKEDITOR.replace( 'reviewcomment_@g.gid',{
                                            height: 200,  removePlugins: 'elementspath' ,resize_enabled:false,
                                            toolbarGroups :
                                     [
                                         { name: 'basicstyles', groups : [ 'Bold','Italic' ] },
                                         { name: 'paragraph', groups : [ 'NumberedList','BulletedList' ] },
                                         { name: 'styles', groups : [ 'Styles','Format' ] },
                                         { name: 'links', groups: [ 'links' ] }
                                         
                                     ]
                                        } );
                                            editor_@(g.gid.ToString().Replace("-","_")).on("change",function (evt) {
                                                $('#reviewcomment_@g.gid').val(evt.editor.getData())
                                        });
                                    </script>
    <text>

                                <input data-goaltitle="@g.Title.Replace("'","").Replace("\"","")" type="hidden" id="numericRating_@g.gid" data-goalid="@g.gid" class="numericRating" value="@GetManagerEvalObj(g.gid).GoalRating" />
    </text>

                                    <div class="ratingcontainer ">
                                        <p style="margin-bottom:0px!important;margin-top:0px;">Grade @Model.EmployeeDetails.FirstName's Performance : </p>@*<div id="ratingfor_@g.gid" data-initval="@GetManagerEvalObj(g.gid).GoalRating" class="goalrating managerrating"></div><div class="counter editable" data-goalid="@g.gid" id="rating_@g.gid"></div>*@
                                        @*<select class="ratingdropdown" id="grading_@g.gid" onclick="savegrading('@g.gid',$(this));">
                                            <option>-- Select One --</option>
                                            <option value="1">Not a fit</option>
                                            <option value="2">Underachieving</option>
                                            <option value="3">Orange</option>
                                            <option value="4">G'in the JD</option>
                                            <option value="5">Crushed It!</option>s
                                        </select>*@
                                        @Html.Partial("GradeDropDown", new string[] { g.gid.ToString(), GetManagerEvalObj(g.gid).GoalRating.HasValue ? GetManagerEvalObj(g.gid).GoalRating.Value.ToString() : "", "savegrading('" + Html.Raw(g.gid.ToString()) + "',null,$(this).data('rating'))" })
                                        <label id="ratingdesc_@g.gid" class="ratingdesc"></label>
                                    
                                    <button onclick="return AddAttachments('@g.gid')" class="btn btn-info pull-right" style=" margin-left:5px;" data-toggle="modal" data-target="#attachmentscontainer_popup">Add Attachments</button>
                                    <button id="save_@g.gid" class="btn btn-success pull-right" style="" data-goalid="@g.gid" onclick="SaveReview('@g.gid')">
                                        Save

                                    </button>
                                        </div>
                                }
                                else
                                {
                                    <h3 style="margin-bottom:15px;color:white;font-weight:300;">Your Evaluation Comment:</h3>
                                    <div class="scroll-pane" style="margin-bottom:15px;float:left;display:inline-block;width:100%;height:200px;overflow-y:auto;">
                                        <p>
                                            @Html.Raw(mgrE.Comment)

                                        </p>
                                    </div>
  
                                    <div class="ratingcontainer pull-left">
                                        <p style="margin-bottom:0px!important;margin-top:5px;">Your Evaluation Grade : </p><div class="readonlyrating" id="rating_@g.gid">@translateRating(mgrE.GoalRating.HasValue?mgrE.GoalRating.Value:0)</div>
                                    </div>
                                }
                                <hr style="margin:0px!important"/>
                                <div id="selfattachments_@g.gid" class="pull-left clear-fix" style="width:100%">

                                    @{
                    attachments = Model.Attachments.Where(x => x.EvaluationGoalId == mgrE.Id && x.EvaluationType == DataService.EvaluationType.MANAGER_EVALUATION).ToList();
                                    }
                                    @if (attachments != null && attachments.Count > 0)
                                    {

                                        <p style="margin-bottom:0px!important;">Attachments (click to view) :</p>

                                        foreach (DataService.Attachment attachment in attachments)
                                        {
                                        <span class="label label-default label-form">
                                            <a class="attachment" target="_blank" href="@Url.Content("~/")evaluation/download?fileid=@attachment.AttachmentId">@attachment.FileName</a>
                                        </span>
                                        }
                                    }
                                </div>


                            </div>
                        </div>
                    </div>
                    <!--Individual Goals Template End-->
                }
            </div>
        </div>
    </div>
</div>

<div id="attachmentscontainer_popup" class="modal fade" role="dialog">
    <div class="modal-dialog  large-8 small-5">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Attach Files : </h4>
            </div>
            <div class="modal-body">

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
<div id="reject_popup" class="modal fade" role="dialog">
    <div class="modal-dialog  large-5 small-5">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Reset to step : </h4>
            </div>
            <div class="modal-body">
                <input type="radio" value="1"  name="resetStep" /> Reset to goal setting phase. <br/> (Select this if the reportee needs to change the goal itself.)
                <br/>
                <br/><input type="radio" value="2"  name="resetStep" /> Reset to self-evaluation.<br /> (Select this if the reportee needs to change his/her self-evaluation or attachments.)
                <br /><br />
                <input type="button" class="btn btn-danger" value="Reject" onclick="return reject('@Model.EmployeeDetails.gid')"/>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
<div id="meetingsummary_popup" class="modal fade" role="dialog">
    <div class="modal-dialog  large-7 small-7">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Meeting Summary: </h4>
            </div>
            <div class="modal-body">
                <span >Please enter meeting summary:</span>
                <textarea style="height: 200px;" id="meetingsummary" name="meetingsummary">
                    @if (Model.Conclusion != null && !string.IsNullOrEmpty(Model.Conclusion.meetingsummary))
                    { 
                        @Model.Conclusion.meetingsummary
                    }

                </textarea>
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-success" value="Save" onclick="return savesummary('@Model.EmployeeDetails.gid')" />
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
<div id="training_popup" class="modal fade" role="dialog">
    <div class="modal-dialog  large-7 small-7">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Training Suggestions: </h4>
            </div>
            <div class="modal-body">
              @Html.Partial("TrainingNeeds")
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-success" value="Save" onclick="return savetraining('@Model.EmployeeDetails.gid')" />
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
<div id="finalcomment_popup" class="modal fade" role="dialog">
    <div class="modal-dialog  large-7 small-7">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Please give an overall evaluation comment for @Model.EmployeeDetails.FirstName : </h4>
            </div>
            <div class="modal-body">
                <textarea id="overallreviewcomment" >@Model.Rating.OverAllReviewComment</textarea>
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-success" value="Save" onclick="return saveoverallreviewcomment('@Model.EmployeeDetails.gid')" />
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>
<div id="overallratingprompt_popup" class="modal fade" role="dialog">
    <div class="modal-dialog  large-7 small-7">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">ALERT : </h4>
            </div>
            <div class="modal-body">
                We detected that you made some change to the evaluation. Would you also like to change the overall grade for the employee before submitting to the HR?
                <br>
                <br>

                Clicking YES will close this dialog, you can change the overall rating and then click the "Send to HR" button again. 
                <br />
                Clicking NO will submit the evaluation for HR.
            </div>
            <div class="modal-footer">
                <input type="button" class="btn btn-success" value="Yes" onclick="allowchangingoverallrating()" />
                <input type="button" class="btn btn-default" data-dismiss="modal" onclick="SendToHR('@Model.EmployeeDetails.gid')" value="No"/>
            </div>
        </div>

    </div>
</div>
<script>
    var selectedmenuid = "team";
    
    var evalchanged = [];
    var ratingchanged=[];
    var anythingChanged =false;
</script>
<script type="text/javascript">
    var automove=false;
    var currentGoalForAttachments="";

    function allowchangingoverallrating() {
        $("#finalcomment_popup").modal("hide");
        $("#overallratingprompt_popup").modal("hide");
    }
    function savegrading(goalid, selectControl, selectedValue)
    {
        $("#numericRating_"+goalid).val(selectedValue);
        //  $("#ratingdesc_"+goalid).html(getRatingDescription(selectedValue));
    }
    function getRatingDescription(ratingValue)
    {
        var rating  = parseInt(ratingValue);
        switch(rating)
        {
            case 5:return "Hit it out of the park – performance stands out at a level not achieved by others. Exceptional Performance.";
                break;
            case 4:return "Getting the job done, the Avalara way – with high quality and superior results. High Performance";
                break;
            case 3:return "Accomplished goals and delivered work as expected.  Solid Performance.";
                break;
            case 2:return "Performance fell short of expectations and needs to improve.  Full results/goals were not achieved.";
                break;
            case 1:return "Not getting the job done and inhibiting results or performance of the company and others.";
                break;
            default:return " ";
                break;
        }
    }

    function toggleattachment(showattachments, goalid) {
        if(showattachments)
        {
            $('#employeecomment_'+goalid).fadeOut();
            $('#reporteeattachments_'+goalid).fadeIn();
        }
        else
        {
            $('#reporteeattachments_'+goalid).fadeOut();
            $('#employeecomment_'+goalid).fadeIn();

        }
    }
    function saveoverallreviewcomment(empid)
    {


        if($("#overall_manager_grading").val()=="" || $("#overall_manager_grading").val()==null)
        {
            alert("Please give an overall grade!");
            continuePublishing = false;
            return false;
        }
        var overallcomment =  $("#overallreviewcomment").val();
        $.post("@Url.Content("~/evaluation/saveoverallreviewcomment")",{"overallcomment":overallcomment,"empid":empid,"overallrating":$("#overall_manager_grading").val()},function(r){
            if(!r.status)
            {
                alert("Error saving comment");
                return;
            }
            else{
                if(publishreview(empid))
                {
                    SendToHR(empid);
                }
            }
        });
    }
    function savesummary(empid)
    {
        var summary =  $("#meetingsummary").val();
        $.post("@Url.Content("~/evaluation/savesummary")",{"summary":summary,"empid":empid}, function(r){
            if(r.status==true)
            {
                $("#meetingsummary_popup").modal("hide");
                @if(Model.Conclusion==null || string.IsNullOrEmpty(Model.Conclusion.training))
                {
                  <text>  $("#training_popup").modal("show"); </text>
                }
            }
            else
                alert("There was an error. Meeting summary was not saved. Please try after some time.")
        });
    }

    function savetraining(empid)
    {
        var training_needs = "";
        $(".traininginput").each(function(i,o){
            training_needs +=$(o).val() +"$$$";
        });

        $.post("@Url.Content("~/evaluation/savetraining")",{"training":training_needs,"empid":empid}, function(r){
            if(r.status==true)
            {
                $("#training_popup").modal("hide");
            }
            else
                alert("There was an error. Training suggestions were not saved. Please try after some time.")
        });
    }
    function AddAttachments(goalid)
    {
        $("#attachmentscontainer_popup .modal-body").load("@Url.Content("~/Evaluation/FileUpload")?evaltype=Manager%20Evaluation"+"&empid=@Model.EmployeeDetails.gid.ToString()&goalid="+ goalid+"&hashvalue="+new Date().getTime(), function(){
            $(".fileupload-buttonbar div:first").removeClass("col-lg-7");
            $(".fileupload-buttonbar div:first").next().removeClass("col-lg-5");

            //$(".fileupload-buttonbar div:first").find(".delete").remove();
            //$(".fileupload-buttonbar div:first").find(".cancel").remove();
            //$(".fileupload-buttonbar div:first").find(".toggle").remove();
        });
        return false;
    }
    function reject(empId)
    {
        //if(!verifychanges())
        //    return false;


        var continueAction = true;
        //$("textarea.managercomments").each(function(i,o){
        //    if($.trim($(o).val())=="")
        //    {
        //        alert("Please fill in your evaluation comments in the textbox for the valid goals and your reason for rejection in the textbox of the goals that you want to reject.");
        //        continueAction = false;
        //        return false;
        //    }
        //    $("#rejectmsg").hide();
        $.post("@Url.Content("~/evaluation/reject")?reporteeId="+empId+"&resetStep="+$("input[name=resetStep]:checked").val(),function(r){
            $("#rejectmsg").show();
            if(r=="error")
            {
                $("#rejectmsg").html("Could not publish.").addClass("alertpublished_error");
            }
            else
            {
                $("#rejectmsg").addClass("alertpublished").html("Sent back for revaluation.");
                $("button").attr("disabled","disabled");
                window.location.href="@Url.Content("~/employee")";
                return;
            }

            setTimeout(function(){
                $("#rejectmsg").removeClass("alertpublished").removeClass("alertpublished_error").hide();//.html("Publish Self-Evaluation");
            },2000);
        });
        //});
    }
    function setGoalID(id)
    {
        currentGoalForAttachments = id;

    }
    function verifychanges()
    {
        if(ratingchanged.length>0 || evalchanged.length>0)
        {
            alert("You have unsaved changes. Please click 'SAVE' button on evaluations/ratings that you have modified then try again.");
            return false;
        }
        return true;
    }
    function removeFromEvalChanged(goalid){
        var idx=-1;
        for(i=0; i< evalchanged.length;i++)
        {
            if(evalchanged[i]==goalid)
            {
                idx=i;
                break;
            }
        }
        if(idx>=0)
        {
            evalchanged.splice(idx,1);
        }
    }
    function removeFromRatingChanged(goalid){
        var idx=-1;
        for(i=0; i< ratingchanged.length;i++)
        {
            if(ratingchanged[i]==goalid)
            {
                idx=i;
                break;
            }
        }
        if(idx>=0)
        {
            ratingchanged.splice(idx,1);
        }
    }
    function finalpublishreview(empId)
    {
        if(!verifychanges())
            return false;

        if(anythingChanged)
        {
            alert("Since there are some modifications, the review will be sent back to HR for approval when you click 'OK'.");
            publishreview(empId);
            return false;
        }

        $.post("@Url.Content("~/evaluation/Publish")?reporteeId="+empId,function(r){
            if(r=="error")
            {
                $("#finalpublish span.text").html("There was an error.");
                $("#finalpublish").removeClass("btn-success").addClass("btn-warning btn-rounded");
            }
            else
            {
                $("#finalpublish span.text").html("Published successfully!");
                $("#finalpublish").addClass("alertpublished");
                $("button").attr("disabled","disabled");
                window.location.reload();
                return;
            }

            setTimeout(function(){
                $("#finalpublish").removeClass("alertpublished").removeClass("btn-warning btn-rounded").hide();//.html("Publish Self-Evaluation");
            },2000);
        });
    }
    function publishreview(empId) {

        if($("#overall_manager_grading").val()=="" || $("#overall_manager_grading").val()==null)
        {
            alert("Please give an overall grade!");
            continuePublishing = false;
            return false;
        }
        if(!verifychanges())
            return false;

        var continuePublishing = true;
        $("textarea.managercomments.commentrequired").each(function(i,o){
            if($.trim($(o).val())=="")
            {
                alert("You missed filling in your evaluation for one or more of the goals/ traits! Please re-verify.");
                continuePublishing = false;
                return false;
            }
        });
        if(!continuePublishing)
            return false;
        $(".counter.editable").each(function(i,o){
            if($.trim($(o).text())=="" || $.trim($(o).text())=="0")
            {
                alert("You need to grade on all the goals.");
                continuePublishing = false;
                return false;
            }
        });
        if(!continuePublishing)
            return false;

        $("#publishmsg").hide();

        if(anythingChanged)
        {
            $("#overallratingprompt_popup").modal();
            return false;

        }
        return true;
        //Send to hr gets called from the modal dialog

    }

    function SendToHR(empId)
    {
        $.post("@Url.Content("~/evaluation/PublishReporteeEvaluation")?reporteeId="+empId,function(r){
            $("#publishmsg").show();
            if(r=="error")
            {
                $("#publishmsg").html("Could not publish.").addClass("alertpublished_error");
            }
            else
            {
                $("#publishmsg").addClass("alertpublished").html("Sent to HR for audit!");
                $("button").attr("disabled","disabled");
                window.location.reload();
                return;
            }

            setTimeout(function(){
                $("#publishmsg").removeClass("alertpublished").removeClass("alertpublished_error").hide();//.html("Publish Self-Evaluation");
            },2000);
        });
    }
    function getRatingDescription(ratingValue)
    {
        var rating  = parseInt(ratingValue);
        switch(rating)
        {
            case 5:return "Hit it out of the park – performance stands out at a level not achieved by others. Exceptional Performance.";
                break;
            case 4:return "Getting the job done, the Avalara way – with high quality and superior results. High Performance";
                break;
            case 3:return "Accomplished goals and delivered work as expected.  Solid Performance.";
                break;
            case 2:return "Performance fell short of expectations and needs to improve.  Full results/goals were not achieved.";
                break;
            case 1:return "Not getting the job done and inhibiting results or performance of the company and others.";
                break;
            default:return " ";
                break;
        }
    }
    var ratingoverlayheight=0;
    function minimizeoverlay()
    {
        if($("#toolbaractionforoverlay").html()=="Minimize")
        {
            if(ratingoverlayheight==0)
            {
                ratingoverlayheight = $("#ratingsoverlay").height();
            }
            $("#ratingsoverlay").animate({ height: "25px"}, {duration: 2000,    specialEasing: {
                width: "linear",
                height: "easeOutBounce"
            }});
            $("#toolbaractionforoverlay").html("Maximize");
        }
        else
        {
            $("#ratingsoverlay").animate({ height: ratingoverlayheight+"px"}, {duration: 2000,    specialEasing: {
                width: "linear",
                height: "easeOutBounce"
            }});
            $("#toolbaractionforoverlay").html("Minimize");
        }
    }

    function SaveReview(goalid)
    {
        anythingChanged =true;


        var reviewcomment = $("#reviewcomment_"+goalid).val();
        var reviewrating = $("#numericRating_"+goalid).val();
        if(reviewrating=="0")
        {
            alert("You cannot leave the evaluation un-graded. ");
            return false;
        }
        if($.trim(reviewcomment)=="")
        {
            alert("Please fill in the evaluation comments in the textbox!");
            return false;
        }
        removeFromEvalChanged(goalid);
        removeFromRatingChanged(goalid);
        $("#savemsg_"+goalid).hide();
        $.post("@Url.Content("~/evaluation/SaveReporteeEvaluation" )",{"reporteeid":"@Model.EmployeeDetails.gid","goalid":goalid,"reviewcomment":reviewcomment,"reviewrating":reviewrating},function(r){
            if(r.msg=="error")
            {
                $("#save"+goalid).addClass("alertsaved_error").html("Error!");
            }
            else
            {
                $("#save_"+goalid).addClass("alertsaved").html("Saved successfully!");
                var translatedRating="";
                switch(Math.round(r.viewmodel.Rating.ManagerOverllRating))
                {
                    case 1:translatedRating ="Not a fit";
                        break;
                    case 2:translatedRating ="Underachieving";
                        break;
                    case 3:translatedRating ="Orange";
                        break;
                    case 4:translatedRating ="G'in the JD";
                        break;
                    case 5:translatedRating ="Crushed It!";
                        break;
                    default:translatedRating="Unrated";
                        break;
                }
                $("#overallrating").html(translatedRating);
                //$(".mgroverallrating").rateYo("option", "rating", r.viewmodel.Rating.ManagerOverllRating);
                //$(".mgroverallrating").next(".counter").text(r.viewmodel.Rating.ManagerOverllRating);
            }

            setTimeout(function(){
                $("#save_"+goalid).removeClass("alertsaved").html("Save");
            },2000);
        });
    }


    function adjustHeaderWidth()
    {
        //$("#fixedheader").css("width","100%");
        //setTimeout(function(){
        //    var header= $("#fixedheader");
        //    header.width(header.width() -  header.position().left);
        //},10);

    }

    function loadAttachments()
    {
        $("#selfattachments_"+currentGoalForAttachments).load("@Url.Content("~/evaluation/AttachmentList")?evaltype=Manager%20Evaluation&goalid="+  currentGoalForAttachments+"&gid=@Model.EmployeeDetails.gid.ToString()&hashvalue="+new Date().getTime());
    }
    var _updatecounter=0;

    var updateCounter = function (rating) {
        _updatecounter++;
        var translatedRating="";
        switch(rating)
        {
            case 1:translatedRating ="Not a fit";
                break;
            case 2:translatedRating ="Underachieving";
                break;
            case 3:translatedRating ="Orange";
                break;
            case 4:translatedRating ="G'in the JD";
                break;
            case 5:translatedRating ="Crushed It!";
                break;
            default:translatedRating="Unrated";
                break;
        }
        $(this).next(".counter").text(translatedRating);
        var goalid =$(this).attr("id").replace("ratingfor_","");
        $("#numericRating_"+goalid).val(rating);
    };

    var setCounter = function(rating)
    {

        if(_updatecounter>0)
        {
            console.log($(this).next(".counter").text() + " --- " + rating);
            var ratingcounter =  $(this).next(".counter");
            var found =false;
            for(i=0;i<ratingchanged.length;i++)
            {
                if(ratingchanged[i]==ratingcounter.data("goalid"))
                {
                    found=true;
                    break;
                }
            }
            if(!found)
                ratingchanged.push( ratingcounter.data("goalid"));

            dataIsDirty();
        }


        var translatedRating="";
        switch(rating)
        {
            case 1:translatedRating ="Not a fit";
                break;
            case 2:translatedRating ="Underachieving";
                break;
            case 3:translatedRating ="Orange";
                break;
            case 4:translatedRating ="G'in the JD";
                break;
            case 5:translatedRating ="Crushed It!";
                break;
            default:translatedRating="Unrated";
                break;
        }
        $(this).next(".counter").text(translatedRating);
    }
    var somethingHasChangedFlag=false;
    function dataIsDirty()
    {
        $("#sendtohrbutton").show();
        $("#finalpublish").hide();
        somethingHasChangedFlag=true;
    }
    $(function () {
        $('#va-accordion').vaccordion({
            accordionW: "100%",
            accordionH: (500+50*@Model.Goals.Count),
            expandedHeight	: 550,
            visibleSlices: @Model.Goals.Count,
            animOpacity: 1.0,
            contentAnimSpeed: 100
        });
        $(".emplrating").rateYo({
            precision: 0,
            spacing: "10px",
            onSet: updateCounter,
            normalFill: "#ccc",
            ratedFill: "#888",
            readOnly: true,
            onChange: updateCounter,
            starWidth: "20px"
        });
        $(".mgroverallrating, .selfoverallrating").rateYo({
            maxValue: 5,
            numStars: 1,
            starWidth: "30px",
            readOnly:true,
            onSet: updateCounter,
            onChange: updateCounter,
            ratedFill: "red",
            precision:2
        });
        $(".managerrating").rateYo({
            precision: 0,
            spacing: "10px",
            onSet: setCounter,
            onChange: updateCounter
            @if (!Model.IsEditable)
        {
            <text>, readOnly: true</text>
        }
        });
        $(".goalrating").each(function(i,o){
            if($(o).data("initval")!=null && $(o).data("initval")!="")
            {
                $(o).rateYo("option", "rating", $(o).data("initval"));
            }
        });

        $($(".va-slice")[0]).find(".va-title").click();
        setTimeout(function(){
            $($(".va-slice")[0]).find(".va-title").click();
        },500);

        setWidth() ;


    });

    function setWidth() {
        setTimeout(function(){
            adjustHeaderWidth();
            var c = $($(".va-slice")[0]).find(".scroll-pane").width();
            if(c<100)
            {
                setWidth();
                return;
            }
            $(".scroll-pane").each(function(i,o){
                $(o).css("width",c);
            });

            $(".scroll-pane, .nav-tabs").css("max-width",c);



        },500);
    }

    function externalEventHandler_Navigate() {
        var idoftitle="";
        $(".va-slice").each(function(i,o){
            if($(o).data("expanded"))
            {
                idoftitle = $(o).attr("id");

                return false;
            }
        });
        $(".va-slice").each(function(i,o){
            $("#"+$(o).attr("id") +" .va-title").removeClass("expandedpane");
        });
        $("#"+idoftitle +" .va-title").addClass("expandedpane");
        if(automove)// for first time only it will be false so that the user can see the full title
            setTimeout(function(){
                // window.location.href="#"+idoftitle;
            },250);

        automove=true;
        setTimeout(function(){
            if($(".scroll-pane:visible").data("eval_scrollpane")=="initialized")
                return;
            $('.scroll-pane:visible').jScrollPane({
                showArrows: true,
                horizontalGutter: 10
            });
        },350);
        console.log($("#evalgoalscontainer").height());
        $(".maincontent").css("height",$("#evalgoalscontainer").height()+151);
    }

    $(document).ready(function(){
        try{
            if($("#overall_manager_grading").data("value")!="0")
            {
                $("#overall_manager_grading").val(parseInt($("#overall_manager_grading").data("value")));
            }
        }catch(x){}
        $.post("@Url.Content("~/evaluation/getHRrejectionmessage")",
            {"evalcycleid":"@Model.Goals.First(x=>!x.Fixed).Evalcycleid","employeeid": "@Model.EmployeeDetails.gid.ToString()"}
            ,function(resp){
                if(resp==null || resp=="null" || resp.length==0)
                    return;
                $("#rejectionMessage").html("<h5>HR has sent  this back to you for re-valuation with the following reason : </h5><h5 style='color:white;'> "+ resp+ "</h5>").fadeIn();

            });
        $("#attachmentscontainer_popup").on('hide.bs.modal', function () {
            loadAttachments();
        });
        $('.nav-tabs a').on('shown.bs.tab', function(){
            $('.scroll-pane:visible').jScrollPane({
                showArrows: true,
                horizontalGutter: 10

            });
        });

        $("textarea.managercomments.commentrequired").change(function(){
            var found =false;
            for(i=0;i<evalchanged.length;i++)
            {
                if(evalchanged[i]==$(this).data("goalid"))
                {
                    found=true;
                    break;
                }
            }
            if(!found)
                evalchanged.push( $(this).data("goalid"));
            dataIsDirty();
        });
        $('blockquote, q').exdent({
            by: '.5em'
        });
        adjustHeaderWidth();
        $(window).resize(function(){
            adjustHeaderWidth();
            $(".maincontent").css("height",$("#evalgoalscontainer").height()+151);
        });
        starttour("evaluationmanagerevaluation");
        @if(Model.Status== DataService.GoalStatus.PUBLISHED )
        {
            if(Model.Conclusion==null || string.IsNullOrEmpty(Model.Conclusion.meetingsummary))
            {
            <text> showsummary();  </text>
            }
            else if (string.IsNullOrEmpty(Model.Conclusion.training))
            {
                <text> showtraining();   </text>
            }
        }

        $(".numericRating").each(function(i,o){
            $("#grading_"+$(o).data("goalid")).val($(o).val());

        });

    });

    function showsummary()
    {
        $("#meetingsummary_popup").modal("show");
    }

    function showtraining()
    {
        $("#training_popup").modal("show");
    }
</script>
<style>
    .readonlyrating {
      background-color:orange;
        font-weight:600;
        text-align:center;
        color:black;
        font-size:15pt;
        padding:5px;
        border-radius:5px;
    }
   .va-title.expandedpane {
    background-color: rgb(55, 70, 89) !important;
    color: white !important;
}
    .alertpublished {
        background-color: none;
        border-color: lightblue;
        border-width: thin;
        border-style: solid;
        border-radius: 5px;
    }

    .alertpublished_error {
        border-color: red;
        background-color: none;
        border-width: thin;
        border-style: solid;
        border-radius: 5px;
    }

    .va-slice ul.nav-tabs li a {
        background-color: gray;
        color: lightgray;
    }

    .va-slice ul.nav-tabs li.active a {
        background-color: white;
        color: #555;
    }

    .tab-content {
        padding-top: 10px;
    }

    .nav-tab, .tab-content {
    }

    .alertsaved, .alertsaved_error {
        background-color: #33414E !important;
        border-color: lightblue;
    }

    .alertsaved_error {
        border-color: red;
    }

    .va-slice {
        cursor: default !important;
        border-bottom-style: double;
    }

    .va-title {
        cursor: pointer;
    }

    .label-default {
        background-color: #777;
        margin-left: 5px;
    }

        .label-default a {
            color: white;
        }

    table.table td {
        vertical-align: middle !important;
    }

        table.table td:nth-child(4) {
            text-align: right !important;
        }

    div.ratingcontainer {
        position: relative;
    }

     div.counter::before, div.counter *::before {
        border-color: transparent darkorange transparent transparent;
        border-style: solid;
        border-width: 5px 5px 5px 0;
        content: "";
        display: block;
        height: 0;
        left: -10px;
        margin-top: -5px;
        position: relative;
        top: 50%;
        width: 0;
    }


    div.counter {
        background-color: darkorange;
        color: #000;
        display: block;
        font-size: 15px;
        height: 25px;
        line-height: 0;
        margin-top: -10px;
        min-width: 20px;
        padding: 5px;
        position: absolute;
        left: 210px;
        top: 50%;
        min-width:100px;
        transform: translateY(-50%);
    }

    div.counter {
        float: left;
        font-weight: bold;
        margin-left: 10px;
        margin-top: 15px;
    }
    
div.selfeval div.counter::before, div.selfeval div.counter *::before
{
    border-color: transparent darkorange transparent transparent;
    }

div.selfeval div.counter {
    background-color: orange;
    left: 150px;
    margin-top: 7px;
    transform: translateY(-16%);
}

    .va-slice-color-1 {
        background-color: #FFF;
    }

    .va-title {
        font-size: 16px;
        font-weight: 300;
        color:gray!important;
            background-color:#eee;
            margin-left:0px!important;
            padding-left:10px;
    }

    .va-wrapper {
        background: none;
    }

    .va-slice p {
        font-size: 15px;
        color: #888;
    }

    .scroll-pane,
    .scroll-pane-arrows {
        width: 100%;
        height: 200px;
        overflow: auto;
    }

    .horizontal-only {
        height: auto;
        max-height: 200px;
    }

    .jspDrag {
        background: #8b8b9f none repeat scroll 0 0;
    }

    .jspArrowUp {
        background-position: 85px -4px !important;
    }

    .jspArrowDown {
        background-position: 0px 0px !important;
    }

    .jspArrow {
        background-image: none !important;
        border-radius: 10px;
    }

    .jspVerticalBar .jspTrack {
        width: 10px !important;
    }

    .jspVerticalBar {
        width: 11px !important;
        border-radius: 5px;
    }

    .va-nav span {
        height: 40px !important;
    }

    .quote {
        font-size: 50pt;
        line-height: 23px;
        vertical-align: middle;
    }

    .va-slice .q {
        color: #888;
        font-size: 15px;
    }

    .va-slice .q {
        font-family: Georgia,serif;
        font-style: italic;
        font-weight: normal;
        line-height: 1.6;
        margin-bottom: 1.25rem;
        text-rendering: optimizelegibility;
        margin-top: 30px;
        clear: left;
    }

    #evalgoalscontainer {
        position: relative;
        top: 118px;
    }
    
    #overallrating, #selfoverallrating {
        margin: 0;
    position: relative;
  right: -45px;
    top: -25px;
    }
       H3 span {
    font-family: georgia;
    font-size: 14px;
    font-style: italic;
    font-weight: normal;
    margin-right: 10px;
    text-transform: none;
}
    #evalrating {
     border-right: 1px dashed gray;
    margin-bottom: 15px;
    margin-left: 20px;
    padding-right: 25px;
    }
    #fixedheader1 h2 {
    font-size: 24px;
    }
    .CompetencyHeader {
        color:yellow;
    }
    html, .off-canvas-wrap {
    overflow-x:auto!important;
    }

       #selfoverallrating_value, #manageroverallrating_value.btn-info {
    /*background-color: #374659;*/
    border-radius: 5px;
    color: white;
    margin-bottom: 3px;
    padding: 5px;
    font-weight:bold;
    }
        .ratingdesc {
      color: #374659;
    font-family: Georgia,serif,helvetica;
    font-size: 15px;
    font-style: italic;
    font-weight: 300;
    }
</style>
